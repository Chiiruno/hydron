Various AJAX-rendered HTML

{% import "github.com/bakape/hydron/common" %}
{% import "github.com/bakape/hydron/files" %}
{% import "strconv" %}

{% func Thumbnail(img common.CompactImage, highlight bool) %}{% stripspace %}
	<figure data-type="{%d int(img.Type) %}"{% space %}
		data-sha1="{%s= img.SHA1 %}"
		{% if highlight %}
			{% space %}class="highlight"
		{% endif %}
	>
		<input type="checkbox" name="img:{%s= img.SHA1 %}">
		<div class="background"></div>
		<img width="{%s= strconv.FormatUint(img.Thumb.Width, 10) %}"{% space %}
			height="{%s= strconv.FormatUint(img.Thumb.Height, 10) %}"{% space %}
			src="{%s= files.NetThumbPath(img.SHA1, img.Thumb.IsPNG) %}"
		>
	</figure>
{% endstripspace %}{% endfunc %}

{% func ImageView(page common.Page) %}{% stripspace %}
	{% code img := page.Viewing %}
	{% code org := organizeTags(img.Tags) %}
	<section id="tags">
		{% if img.Name != "" %}
			<span class="spaced image-name">
				<a href="/search?q={%s img.Name %}" title="Search for name">
					Name:{% space %}{%s img.Name %}
				</a>
			</span>
		{% endif %}
		{%= renderTags(org[common.Character], page) %}
		{%= renderTags(org[common.Series], page) %}
		{%= renderTags(org[common.Author], page) %}
		{%= renderTags(org[common.Rating], page) %}
		{%= renderTags(org[common.Undefined], page) %}
	</section>
	{% code src := files.NetSourcePath(img.SHA1, img.Type) %}
	{% switch common.GetMediaType(img.Type) %}
	{% case common.MediaImage %}
		<img src="{%s= src %}">
	{% case common.MediaVideo %}
		<video src="{%s= src %}" autoplay loop controls>
	{% default %}
		<b>Preview not supported for this format</b>
	{% endswitch %}
{% endstripspace %}{% endfunc %}

Reender tag adition and direct tag query links
{% func renderTags(tags []common.Tag, page common.Page) %}{% stripspace %}
	{% code page.Page = 0 %}
	{% code page.Viewing = nil %}
	{% code init := page.Filters %}
	{% for _, t  := range tags %}
		{% code page.Filters = init %}
		{% code filter := common.TagFilter{ TagBase: t.TagBase } %}
		{% code page.Filters.Tag = append(page.Filters.Tag, filter) %}
		<span class="spaced tag-{%z= common.BufferWriter(t.Type) %}">
			<a href="{%s= page.URL() %}" title="Add to search">
				+
			</a>
			{% code page.Filters.Tag[len(page.Filters.Tag)-1].Negative = true %}
			<a href="{%s= page.URL() %}" title="Remove from search">
				-
			</a>
			{% code page.Filters = common.FilterSet{
				Tag: []common.TagFilter{filter},
			} %}
			<a href="{%s= page.URL() %}" title="Search for tag">
				{% if t.Type == common.Rating %}
					rating:{% space %}
				{% endif %}
				{%s t.Tag %}
			</a>
		</span>
	{% endfor %}
{% endstripspace %}{% endfunc %}
