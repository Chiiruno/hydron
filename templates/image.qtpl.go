// This file is automatically generated by qtc from "image.qtpl".
// See https://github.com/valyala/quicktemplate for details.

// Various AJAX-rendered HTML
//

//line image.qtpl:3
package templates

//line image.qtpl:3
import "github.com/bakape/hydron/common"

//line image.qtpl:4
import "github.com/bakape/hydron/files"

//line image.qtpl:5
import "strconv"

//line image.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line image.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line image.qtpl:7
func StreamThumbnail(qw422016 *qt422016.Writer, img common.CompactImage, highlight bool) {
	//line image.qtpl:7
	qw422016.N().S(`<figure data-type="`)
	//line image.qtpl:8
	qw422016.N().D(int(img.Type))
	//line image.qtpl:8
	qw422016.N().S(`"`)
	//line image.qtpl:8
	qw422016.N().S(` `)
	//line image.qtpl:8
	qw422016.N().S(`data-sha1="`)
	//line image.qtpl:9
	qw422016.N().S(img.SHA1)
	//line image.qtpl:9
	qw422016.N().S(`"`)
	//line image.qtpl:10
	if highlight {
		//line image.qtpl:11
		qw422016.N().S(` `)
		//line image.qtpl:11
		qw422016.N().S(`class="highlight"`)
		//line image.qtpl:12
	}
	//line image.qtpl:12
	qw422016.N().S(`><input type="checkbox" name="img:`)
	//line image.qtpl:14
	qw422016.N().S(img.SHA1)
	//line image.qtpl:14
	qw422016.N().S(`"><div class="background"></div><img width="`)
	//line image.qtpl:16
	qw422016.N().S(strconv.FormatUint(img.Thumb.Width, 10))
	//line image.qtpl:16
	qw422016.N().S(`"`)
	//line image.qtpl:16
	qw422016.N().S(` `)
	//line image.qtpl:16
	qw422016.N().S(`height="`)
	//line image.qtpl:17
	qw422016.N().S(strconv.FormatUint(img.Thumb.Height, 10))
	//line image.qtpl:17
	qw422016.N().S(`"`)
	//line image.qtpl:17
	qw422016.N().S(` `)
	//line image.qtpl:17
	qw422016.N().S(`src="`)
	//line image.qtpl:18
	qw422016.N().S(files.NetThumbPath(img.SHA1, img.Thumb.IsPNG))
	//line image.qtpl:18
	qw422016.N().S(`"></figure>`)
//line image.qtpl:21
}

//line image.qtpl:21
func WriteThumbnail(qq422016 qtio422016.Writer, img common.CompactImage, highlight bool) {
	//line image.qtpl:21
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line image.qtpl:21
	StreamThumbnail(qw422016, img, highlight)
	//line image.qtpl:21
	qt422016.ReleaseWriter(qw422016)
//line image.qtpl:21
}

//line image.qtpl:21
func Thumbnail(img common.CompactImage, highlight bool) string {
	//line image.qtpl:21
	qb422016 := qt422016.AcquireByteBuffer()
	//line image.qtpl:21
	WriteThumbnail(qb422016, img, highlight)
	//line image.qtpl:21
	qs422016 := string(qb422016.B)
	//line image.qtpl:21
	qt422016.ReleaseByteBuffer(qb422016)
	//line image.qtpl:21
	return qs422016
//line image.qtpl:21
}

//line image.qtpl:23
func StreamImageView(qw422016 *qt422016.Writer, page common.Page) {
	//line image.qtpl:24
	img := page.Viewing

	//line image.qtpl:25
	org := organizeTags(img.Tags)

	//line image.qtpl:25
	qw422016.N().S(`<section id="tags"><span class="spaced image-name"><a href="/search?q=`)
	//line image.qtpl:28
	qw422016.N().S(img.Name)
	//line image.qtpl:28
	qw422016.N().S(`" title="Search for name">Name:`)
	//line image.qtpl:29
	qw422016.N().S(` `)
	//line image.qtpl:29
	qw422016.E().S(img.Name)
	//line image.qtpl:29
	qw422016.N().S(`</a></span>`)
	//line image.qtpl:32
	streamrenderTags(qw422016, org[common.Character], page)
	//line image.qtpl:33
	streamrenderTags(qw422016, org[common.Series], page)
	//line image.qtpl:34
	streamrenderTags(qw422016, org[common.Author], page)
	//line image.qtpl:35
	streamrenderTags(qw422016, org[common.Rating], page)
	//line image.qtpl:36
	streamrenderTags(qw422016, org[common.Undefined], page)
	//line image.qtpl:36
	qw422016.N().S(`</section>`)
	//line image.qtpl:38
	src := files.NetSourcePath(img.SHA1, img.Type)

	//line image.qtpl:39
	switch common.GetMediaType(img.Type) {
	//line image.qtpl:40
	case common.MediaImage:
		//line image.qtpl:40
		qw422016.N().S(`<img src="`)
		//line image.qtpl:41
		qw422016.N().S(src)
		//line image.qtpl:41
		qw422016.N().S(`">`)
	//line image.qtpl:42
	case common.MediaVideo:
		//line image.qtpl:42
		qw422016.N().S(`<video src="`)
		//line image.qtpl:43
		qw422016.N().S(src)
		//line image.qtpl:43
		qw422016.N().S(`" autoplay loop controls>`)
	//line image.qtpl:44
	default:
		//line image.qtpl:44
		qw422016.N().S(`<b>Preview not supported for this format</b>`)
		//line image.qtpl:46
	}
//line image.qtpl:47
}

//line image.qtpl:47
func WriteImageView(qq422016 qtio422016.Writer, page common.Page) {
	//line image.qtpl:47
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line image.qtpl:47
	StreamImageView(qw422016, page)
	//line image.qtpl:47
	qt422016.ReleaseWriter(qw422016)
//line image.qtpl:47
}

//line image.qtpl:47
func ImageView(page common.Page) string {
	//line image.qtpl:47
	qb422016 := qt422016.AcquireByteBuffer()
	//line image.qtpl:47
	WriteImageView(qb422016, page)
	//line image.qtpl:47
	qs422016 := string(qb422016.B)
	//line image.qtpl:47
	qt422016.ReleaseByteBuffer(qb422016)
	//line image.qtpl:47
	return qs422016
//line image.qtpl:47
}

// Reender tag adition and direct tag query links

//line image.qtpl:50
func streamrenderTags(qw422016 *qt422016.Writer, tags []common.Tag, page common.Page) {
	//line image.qtpl:51
	page.Page = 0

	//line image.qtpl:52
	page.Viewing = nil

	//line image.qtpl:53
	init := page.Filters

	//line image.qtpl:54
	for _, t := range tags {
		//line image.qtpl:55
		page.Filters = init

		//line image.qtpl:56
		filter := common.TagFilter{TagBase: t.TagBase}

		//line image.qtpl:57
		page.Filters.Tag = append(page.Filters.Tag, filter)

		//line image.qtpl:57
		qw422016.N().S(`<span class="spaced tag-`)
		//line image.qtpl:58
		qw422016.N().Z(common.BufferWriter(t.Type))
		//line image.qtpl:58
		qw422016.N().S(`"><a href="`)
		//line image.qtpl:59
		qw422016.N().S(page.URL())
		//line image.qtpl:59
		qw422016.N().S(`" title="Add to search">+</a>`)
		//line image.qtpl:62
		page.Filters.Tag[len(page.Filters.Tag)-1].Negative = true

		//line image.qtpl:62
		qw422016.N().S(`<a href="`)
		//line image.qtpl:63
		qw422016.N().S(page.URL())
		//line image.qtpl:63
		qw422016.N().S(`" title="Remove from search">-</a>`)
		//line image.qtpl:66
		page.Filters = common.FilterSet{
			Tag: []common.TagFilter{filter},
		}

		//line image.qtpl:68
		qw422016.N().S(`<a href="`)
		//line image.qtpl:69
		qw422016.N().S(page.URL())
		//line image.qtpl:69
		qw422016.N().S(`" title="Search for tag">`)
		//line image.qtpl:70
		if t.Type == common.Rating {
			//line image.qtpl:70
			qw422016.N().S(`rating:`)
			//line image.qtpl:71
			qw422016.N().S(` `)
			//line image.qtpl:72
		}
		//line image.qtpl:73
		qw422016.E().S(t.Tag)
		//line image.qtpl:73
		qw422016.N().S(`</a></span>`)
		//line image.qtpl:76
	}
//line image.qtpl:77
}

//line image.qtpl:77
func writerenderTags(qq422016 qtio422016.Writer, tags []common.Tag, page common.Page) {
	//line image.qtpl:77
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line image.qtpl:77
	streamrenderTags(qw422016, tags, page)
	//line image.qtpl:77
	qt422016.ReleaseWriter(qw422016)
//line image.qtpl:77
}

//line image.qtpl:77
func renderTags(tags []common.Tag, page common.Page) string {
	//line image.qtpl:77
	qb422016 := qt422016.AcquireByteBuffer()
	//line image.qtpl:77
	writerenderTags(qb422016, tags, page)
	//line image.qtpl:77
	qs422016 := string(qb422016.B)
	//line image.qtpl:77
	qt422016.ReleaseByteBuffer(qb422016)
	//line image.qtpl:77
	return qs422016
//line image.qtpl:77
}
