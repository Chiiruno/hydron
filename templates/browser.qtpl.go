// This file is automatically generated by qtc from "browser.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line browser.qtpl:1
package templates

//line browser.qtpl:1
import "github.com/bakape/hydron/common"

//line browser.qtpl:2
import "github.com/bakape/hydron/files"

//line browser.qtpl:3
import "strconv"

//line browser.qtpl:4
import "net/url"

//line browser.qtpl:5
import "strings"

//line browser.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line browser.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line browser.qtpl:7
func StreamBrowser(qw422016 *qt422016.Writer, params string, page, totalPages int, imgs []common.CompactImage) {
	//line browser.qtpl:8
	title := params

	//line browser.qtpl:9
	if title == "" {
		//line browser.qtpl:10
		title = "hydron"

		//line browser.qtpl:11
	}
	//line browser.qtpl:12
	streamhead(qw422016, title)
	//line browser.qtpl:12
	qw422016.N().S(`<body><nav id="top-banner"><form method="get"><input type="search" id="search" placeholder="Search" value="`)
	//line browser.qtpl:16
	qw422016.E().S(params)
	//line browser.qtpl:16
	qw422016.N().S(`" name="q"></form>`)
	//line browser.qtpl:18
	streampagination(qw422016, page, totalPages, params)
	//line browser.qtpl:18
	qw422016.N().S(`</nav><div id="overlay"></div><section id="browser">`)
	//line browser.qtpl:22
	for _, img := range imgs {
		//line browser.qtpl:22
		qw422016.N().S(`<figure><label><input type="checkbox" name="`)
		//line browser.qtpl:25
		qw422016.N().S(img.SHA1)
		//line browser.qtpl:25
		qw422016.N().S(`"><div class="background"></div><img width="`)
		//line browser.qtpl:27
		qw422016.N().S(strconv.FormatUint(img.Thumb.Width, 10))
		//line browser.qtpl:27
		qw422016.N().S(`"height="`)
		//line browser.qtpl:28
		qw422016.N().S(strconv.FormatUint(img.Thumb.Height, 10))
		//line browser.qtpl:28
		qw422016.N().S(`"src="`)
		//line browser.qtpl:29
		qw422016.N().S(files.NetThumbPath(img.SHA1, img.Thumb.IsPNG))
		//line browser.qtpl:29
		qw422016.N().S(`"></label></figure>`)
		//line browser.qtpl:33
	}
	//line browser.qtpl:33
	qw422016.N().S(`</section></body>`)
//line browser.qtpl:36
}

//line browser.qtpl:36
func WriteBrowser(qq422016 qtio422016.Writer, params string, page, totalPages int, imgs []common.CompactImage) {
	//line browser.qtpl:36
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line browser.qtpl:36
	StreamBrowser(qw422016, params, page, totalPages, imgs)
	//line browser.qtpl:36
	qt422016.ReleaseWriter(qw422016)
//line browser.qtpl:36
}

//line browser.qtpl:36
func Browser(params string, page, totalPages int, imgs []common.CompactImage) string {
	//line browser.qtpl:36
	qb422016 := qt422016.AcquireByteBuffer()
	//line browser.qtpl:36
	WriteBrowser(qb422016, params, page, totalPages, imgs)
	//line browser.qtpl:36
	qs422016 := string(qb422016.B)
	//line browser.qtpl:36
	qt422016.ReleaseByteBuffer(qb422016)
	//line browser.qtpl:36
	return qs422016
//line browser.qtpl:36
}

// Links to different pages on a search page

//line browser.qtpl:39
func streampagination(qw422016 *qt422016.Writer, page, total int, params string) {
	//line browser.qtpl:40
	val := url.Values{
		"q": strings.Split(params, " "),
	}

	//line browser.qtpl:42
	qw422016.N().S(`<span class="spaced">`)
	//line browser.qtpl:44
	if page != 0 {
		//line browser.qtpl:45
		if page-1 != 0 {
			//line browser.qtpl:46
			streampageLink(qw422016, val, 0, "<<")
			//line browser.qtpl:47
		}
		//line browser.qtpl:48
		streampageLink(qw422016, val, page-1, "<")
		//line browser.qtpl:49
	}
	//line browser.qtpl:50
	count := 0

	//line browser.qtpl:51
	for i := page - 5; i < total && count < 10; i++ {
		//line browser.qtpl:52
		if i < 0 {
			//line browser.qtpl:53
			continue
			//line browser.qtpl:54
		}
		//line browser.qtpl:55
		count++

		//line browser.qtpl:56
		if i != page {
			//line browser.qtpl:57
			streampageLink(qw422016, val, i, strconv.Itoa(i+1))
			//line browser.qtpl:58
		} else {
			//line browser.qtpl:58
			qw422016.N().S(`<b>`)
			//line browser.qtpl:59
			qw422016.N().D(i + 1)
			//line browser.qtpl:59
			qw422016.N().S(`</b>`)
			//line browser.qtpl:60
		}
		//line browser.qtpl:61
	}
	//line browser.qtpl:62
	if page != total-1 {
		//line browser.qtpl:63
		streampageLink(qw422016, val, page+1, ">")
		//line browser.qtpl:64
		if page+1 != total-1 {
			//line browser.qtpl:65
			streampageLink(qw422016, val, total-1, ">>")
			//line browser.qtpl:66
		}
		//line browser.qtpl:67
	}
	//line browser.qtpl:67
	qw422016.N().S(`</span>`)
//line browser.qtpl:69
}

//line browser.qtpl:69
func writepagination(qq422016 qtio422016.Writer, page, total int, params string) {
	//line browser.qtpl:69
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line browser.qtpl:69
	streampagination(qw422016, page, total, params)
	//line browser.qtpl:69
	qt422016.ReleaseWriter(qw422016)
//line browser.qtpl:69
}

//line browser.qtpl:69
func pagination(page, total int, params string) string {
	//line browser.qtpl:69
	qb422016 := qt422016.AcquireByteBuffer()
	//line browser.qtpl:69
	writepagination(qb422016, page, total, params)
	//line browser.qtpl:69
	qs422016 := string(qb422016.B)
	//line browser.qtpl:69
	qt422016.ReleaseByteBuffer(qb422016)
	//line browser.qtpl:69
	return qs422016
//line browser.qtpl:69
}

// Link to a different paginated search page

//line browser.qtpl:72
func streampageLink(qw422016 *qt422016.Writer, values url.Values, page int, text string) {
	//line browser.qtpl:73
	values.Set("page", strconv.Itoa(page))

	//line browser.qtpl:73
	qw422016.N().S(`<a href="?`)
	//line browser.qtpl:74
	qw422016.N().S(values.Encode())
	//line browser.qtpl:74
	qw422016.N().S(`">`)
	//line browser.qtpl:75
	qw422016.N().S(text)
	//line browser.qtpl:75
	qw422016.N().S(`</a>`)
//line browser.qtpl:77
}

//line browser.qtpl:77
func writepageLink(qq422016 qtio422016.Writer, values url.Values, page int, text string) {
	//line browser.qtpl:77
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line browser.qtpl:77
	streampageLink(qw422016, values, page, text)
	//line browser.qtpl:77
	qt422016.ReleaseWriter(qw422016)
//line browser.qtpl:77
}

//line browser.qtpl:77
func pageLink(values url.Values, page int, text string) string {
	//line browser.qtpl:77
	qb422016 := qt422016.AcquireByteBuffer()
	//line browser.qtpl:77
	writepageLink(qb422016, values, page, text)
	//line browser.qtpl:77
	qs422016 := string(qb422016.B)
	//line browser.qtpl:77
	qt422016.ReleaseByteBuffer(qb422016)
	//line browser.qtpl:77
	return qs422016
//line browser.qtpl:77
}
